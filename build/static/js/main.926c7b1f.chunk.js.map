{"version":3,"sources":["img/rabbit-g.png","img/cat-g.png","img/wolf-g.png","img/horse-g.png","img/camel-g.png","img/elephant-g.png","img/rabbit-s.png","img/cat-s.png","img/wolf-s.png","img/horse-s.png","img/camel-s.png","img/elephant-s.png","index.js"],"names":["Game","GOLD","SILVER","RABBITS_ROW","Array","keys","map","OTHER_ANIMALS_ROW","POWER_TO_IMG","rabbitG","catG","wolfG","horseG","camelG","elephantG","rabbitS","catS","wolfS","horseS","camelS","elephantS","DEFAULT_HISTORY","playerOnTurn","movesLeft","winner","board","idx","rabbit","concat","animal","useState","isHistoryEnabled","setIsHistoryEnabled","selectedPositions","setSelectedPositions","currentTurn","setCurrentTurn","currentMove","setCurrentMove","history","setHistory","ownSelRow","ownSelCol","enemySelRow","enemySelCol","enemy","getNeighbours","rowIdx","colIdx","undefined","filter","el","handleCellClick","clickedCellFigure","clickedCellOwner","length","nextHistory","turns","move","Object","assign","nextBoard","row","ownSelFigure","ownSelOwner","ownSelNeighbours","enemySelNeighbours","isFrozen","neighbours","every","some","neighFigure","neighOwner","getIsFrozen","isValidCellClick","neighbour","neighRow","neighCol","getIsValidCellClick","slice","isPushOrPull","forEach","trapOwner","removeFiguresInTraps","nextWinner","figure","owner","handleEndTurnClick","nextPlayerOnTurn","goldHasRabbits","silverHasRabbits","i","getNextWinner","toggleHistory","changeToTurn","wantedTurn","changeToMove","wantedMove","startNewGame","window","confirm","BoardInfo","className","toUpperCase","onClick","disabled","Board","cell","classes","includes","src","alt","width","height","HistoryOfMoves","_","Options","turn","nameOfPlayer","replace","m","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.926c7b1f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rabbit-g.5a4c4a45.png\";","export default __webpack_public_path__ + \"static/media/cat-g.a895ead5.png\";","export default __webpack_public_path__ + \"static/media/wolf-g.8d1a6f9f.png\";","export default __webpack_public_path__ + \"static/media/horse-g.562e2558.png\";","export default __webpack_public_path__ + \"static/media/camel-g.4f28b9c5.png\";","export default __webpack_public_path__ + \"static/media/elephant-g.a7445149.png\";","export default __webpack_public_path__ + \"static/media/rabbit-s.89c019da.png\";","export default __webpack_public_path__ + \"static/media/cat-s.a0ddfe76.png\";","export default __webpack_public_path__ + \"static/media/wolf-s.4311b5ff.png\";","export default __webpack_public_path__ + \"static/media/horse-s.7c52f2eb.png\";","export default __webpack_public_path__ + \"static/media/camel-s.214e0078.png\";","export default __webpack_public_path__ + \"static/media/elephant-s.49328257.png\";","import React, { useState } from 'react'\nimport { render } from 'react-dom'\nimport './index.css'\nimport rabbitG from \"./img/rabbit-g.png\"\nimport catG from \"./img/cat-g.png\"\nimport wolfG from \"./img/wolf-g.png\"\nimport horseG from \"./img/horse-g.png\"\nimport camelG from \"./img/camel-g.png\"\nimport elephantG from \"./img/elephant-g.png\"\nimport rabbitS from \"./img/rabbit-s.png\"\nimport catS from \"./img/cat-s.png\"\nimport wolfS from \"./img/wolf-s.png\"\nimport horseS from \"./img/horse-s.png\"\nimport camelS from \"./img/camel-s.png\"\nimport elephantS from \"./img/elephant-s.png\"\n\nconst Game = () => {\n  const GOLD = 'gold'\n  const SILVER = 'silver'\n  const RABBITS_ROW = [...Array(8).keys()].map(() => [1])\n  const OTHER_ANIMALS_ROW = [[2], [4], [3], [6], [5], [3], [4], [2]]\n  const POWER_TO_IMG = {\n    [`1 ${GOLD}`]: rabbitG,\n    [`2 ${GOLD}`]: catG,\n    [`3 ${GOLD}`]: wolfG,\n    [`4 ${GOLD}`]: horseG,\n    [`5 ${GOLD}`]: camelG,\n    [`6 ${GOLD}`]: elephantG,\n    [`1 ${SILVER}`]: rabbitS,\n    [`2 ${SILVER}`]: catS,\n    [`3 ${SILVER}`]: wolfS,\n    [`4 ${SILVER}`]: horseS,\n    [`5 ${SILVER}`]: camelS,\n    [`6 ${SILVER}`]: elephantS\n  }\n  const DEFAULT_HISTORY = [[{\n    playerOnTurn: GOLD,\n    movesLeft: 4,\n    winner: null,\n    board: [...Array(8).keys()].map(idx => {\n      switch (idx) {\n        case 0:\n          return RABBITS_ROW.map(rabbit => rabbit.concat(SILVER))\n        case 7:\n          return RABBITS_ROW.map(rabbit => rabbit.concat(GOLD))\n        case 1:\n          return OTHER_ANIMALS_ROW.map(animal => animal.concat(SILVER))\n        case 6:\n          return OTHER_ANIMALS_ROW.map(animal => animal.concat(GOLD))\n        default:\n          return [...Array(8).keys()].map(() => [null])\n      }\n    })\n  }]]\n\n  const [isHistoryEnabled, setIsHistoryEnabled] = useState(false)\n  const [selectedPositions, setSelectedPositions] = useState([[], []])\n  const [currentTurn, setCurrentTurn] = useState(0)\n  const [currentMove, setCurrentMove] = useState(0)\n  const [history, setHistory] = useState(DEFAULT_HISTORY)\n\n  const { playerOnTurn, movesLeft, winner, board } = history[currentTurn][currentMove]\n  const [[ownSelRow, ownSelCol], [enemySelRow, enemySelCol]] = selectedPositions\n  const enemy = playerOnTurn === GOLD ? SILVER : GOLD\n\n  const getNeighbours = ({ rowIdx, colIdx, board }) => {\n    return [\n      rowIdx > 0 ?\n        [[rowIdx - 1, colIdx], board[rowIdx - 1][colIdx], 'top'] :\n        undefined,\n      rowIdx < 7 ?\n        [[rowIdx + 1, colIdx], board[rowIdx + 1][colIdx], 'bottom'] :\n        undefined,\n      colIdx > 0 ?\n        [[rowIdx, colIdx - 1], board[rowIdx][colIdx - 1], 'left'] :\n        undefined,\n      colIdx < 7 ?\n        [[rowIdx, colIdx + 1], board[rowIdx][colIdx + 1], 'right'] :\n        undefined\n    ].filter(el => el !== undefined)\n  }\n\n  const getIsFrozen = ({ neighbours, ownSelFigure }) => (\n    neighbours.every(([_pos, [_fig, neighOwner]]) => neighOwner !== playerOnTurn) &&\n    neighbours.some(([_pos, [neighFigure, neighOwner]]) =>\n      neighFigure > ownSelFigure && neighOwner === enemy\n    )\n  )\n\n  const getIsValidCellClick = ({\n    neighbours,\n    rowIdx,\n    colIdx,\n    ownSelFigure,\n    ownSelOwner,\n    clickedCellFigure\n  }) => {\n    // rabbit is clicked, which can't go back\n    if (clickedCellFigure === null && ownSelFigure === 1) {\n      neighbours = neighbours.filter(neighbour => (\n        !(neighbour[2] === 'top' && ownSelFigure === 1 && ownSelOwner === SILVER) &&\n        !(neighbour[2] === 'bottom' && ownSelFigure === 1 && ownSelOwner === GOLD)\n      ))\n    // enemy figure is clicked, so add its neighbour cells\n    } else if (typeof enemySelRow === 'number' && typeof enemySelCol === 'number') {\n      neighbours = neighbours.concat(getNeighbours({\n        rowIdx: enemySelRow,\n        colIdx: enemySelCol,\n        board\n      }))\n    }\n\n    return neighbours.some(([[neighRow, neighCol], [neighFigure, neighOwner]]) => (\n      neighRow === rowIdx &&\n      neighCol === colIdx &&\n      (\n        neighFigure === null ||\n        (neighOwner === enemy && neighFigure < ownSelFigure && movesLeft > 1)\n      )\n    ))\n  }\n\n  const removeFiguresInTraps = ({ board, rowIdx, colIdx }) => {\n    // position and owner\n    const traps = [\n      [[2, 2], board[2][2][1]],\n      [[2, 5], board[2][5][1]],\n      [[5, 2], board[5][2][1]],\n      [[5, 5], board[5][5][1]]\n    ]\n\n    traps.forEach(([[rowIdx, colIdx], trapOwner]) => {\n      if (trapOwner === undefined) {\n        return false\n      }\n\n      const neighbourOwners = getNeighbours({ rowIdx, colIdx, board })\n        .map(neighbour => neighbour[1][1])\n\n      if (neighbourOwners.every(neighOwner => neighOwner !== trapOwner)) {\n        board[rowIdx][colIdx] = [null]\n      }\n    })\n\n    // remove selection if selected figure got removed from trap\n    if (board[rowIdx][colIdx][0] === null) {\n      setSelectedPositions([[], []])\n    }\n  }\n  \n  //TODO: check if has available turns\n  const getNextWinner = () => {\n    let [goldHasRabbits, silverHasRabbits] = [false, false]\n\n    for (let i = 0; i < board.length; i++) {\n      if (goldHasRabbits && silverHasRabbits) {\n        break\n      }\n\n      board[i].some(([figure, owner]) => {\n        if (figure === 1) {\n          if (owner === GOLD) {\n            goldHasRabbits = true\n          } else {\n            silverHasRabbits = true\n          }\n\n          return true\n        }\n\n        return false\n      })\n    }\n\n    if (!silverHasRabbits) {\n      return GOLD\n    }\n\n    if (!goldHasRabbits) {\n      return SILVER\n    }\n\n    return null\n  }\n\n  const handleCellClick = ({ rowIdx, colIdx }) => () => {\n    const [clickedCellFigure, clickedCellOwner] = board[rowIdx][colIdx]\n\n    // Clicking on own figure\n    if (\n      clickedCellFigure !== null &&\n      clickedCellOwner === playerOnTurn &&\n      (currentTurn > 1 || selectedPositions[0].length === 0)\n    ) {\n      setSelectedPositions([[rowIdx, colIdx], []])\n      return\n    }\n\n    // Moving the selected figures\n    if (selectedPositions[0].length === 2) {\n      const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n      const nextBoard = board.map(row => [...row])\n\n      const [ownSelFigure, ownSelOwner] = board[ownSelRow][ownSelCol]\n      const ownSelNeighbours = getNeighbours({ rowIdx: ownSelRow, colIdx: ownSelCol, board })\n      const enemySelNeighbours = getNeighbours({ rowIdx: enemySelRow, colIdx: enemySelCol, board })\n\n      const isFrozen = getIsFrozen({ neighbours: ownSelNeighbours, ownSelFigure })\n      const isValidCellClick = getIsValidCellClick({\n        neighbours: ownSelNeighbours.concat(enemySelNeighbours),\n        rowIdx,\n        colIdx,\n        ownSelFigure,\n        ownSelOwner,\n        clickedCellFigure\n      })\n\n      // rearranging figures in first 2 turns\n      if (\n        currentTurn < 2 &&\n        clickedCellFigure !== null &&\n        clickedCellOwner === playerOnTurn\n      ) {\n        nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n        nextBoard[ownSelRow][ownSelCol] = board[rowIdx][colIdx]\n\n        // remove the selection on the second click\n        setSelectedPositions([[], []])\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            movesLeft,\n            winner,\n            board: nextBoard\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n\n        return\n      }\n\n      // checking if valid click\n      if (currentTurn > 1 && movesLeft > 0 && !isFrozen && isValidCellClick) {\n        // selecting on neighbour enemy figure\n        if (clickedCellOwner === enemy) {\n          setSelectedPositions([[ownSelRow, ownSelCol], [rowIdx, colIdx]])\n          return\n        }\n\n        const isPushOrPull = selectedPositions[1].length === 2\n\n        // enemy figure is selected and trying to push or pull\n        if (isPushOrPull) {\n          // pull\n          if (ownSelNeighbours.some(\n            ([[neighRow, neighCol]]) => neighRow === rowIdx && neighCol === colIdx)\n          ) {\n            nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = [null]\n\n            setSelectedPositions([[rowIdx, colIdx], []])\n          // push\n          } else {\n            nextBoard[rowIdx][colIdx] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = [null]\n\n            setSelectedPositions([[enemySelRow, enemySelCol], []])\n          }\n        // moving own figure to empty cell\n        } else {\n          nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n          nextBoard[ownSelRow][ownSelCol] = [null]\n\n          setSelectedPositions([[rowIdx, colIdx], []])\n        }\n\n        // remove figures on modified board\n        removeFiguresInTraps({ board: nextBoard, rowIdx, colIdx })\n\n        // check if a rabbit has reached the end\n        let nextWinner = null\n\n        if (nextBoard[0].some(([figure, owner]) => figure === 1 && owner === GOLD)) {\n          nextWinner = GOLD\n        }\n\n        if (nextBoard[7].some(([figure, owner]) => figure === 1 && owner === SILVER)) {\n          nextWinner = SILVER\n        }\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            movesLeft: isPushOrPull ? movesLeft - 2 : movesLeft - 1,\n            winner: nextWinner,\n            board: nextBoard\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n      }\n    }\n  }\n\n  //TODO: prevent no move\n  //TODO: prevent zugzwag\n  const handleEndTurnClick = () => {\n    const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n    const nextPlayerOnTurn = playerOnTurn === GOLD ? SILVER : GOLD\n    const nextWinner = getNextWinner()\n\n    setCurrentTurn(currentTurn + 1)\n    setCurrentMove(0)\n    setSelectedPositions([[], []])\n    setHistory(nextHistory.slice(0, currentTurn + 1).concat([[{\n      playerOnTurn: nextPlayerOnTurn,\n      movesLeft: 4,\n      winner: nextWinner,\n      board\n    }]]))\n  }\n\n  const toggleHistory = () => {\n    setIsHistoryEnabled(!isHistoryEnabled)\n  }\n\n  const changeToTurn = wantedTurn => () => {\n    setCurrentTurn(wantedTurn)\n    setCurrentMove(history[wantedTurn].length - 1)\n    setSelectedPositions([[], []])\n  }\n\n  const changeToMove = wantedMove => () => {\n    setCurrentMove(wantedMove)\n    setSelectedPositions([[], []])\n  }\n\n  const startNewGame = () => {\n    if (window.confirm('Are you sure you want to start a new game?')) {\n      setSelectedPositions([[], []])\n      setCurrentTurn(0)\n      setCurrentMove(0)\n      setHistory(DEFAULT_HISTORY)\n    }\n  }\n\n  const BoardInfo = () => (\n    <div className='board-info'>\n      <div className='status'>\n        {\n          currentTurn < 2 ?\n            `Rearrange figures for ${playerOnTurn}` :\n            typeof winner === 'string' ?\n              `Winner is ${winner.toUpperCase()}!` :\n              `Moves left for ${playerOnTurn}: ${movesLeft}`\n        }\n      </div>\n      <button\n        className='end-turn'\n        onClick={handleEndTurnClick}\n        disabled={\n          (currentTurn > 1 && movesLeft === 4) ||\n          typeof winner === 'string'\n        }\n      >\n        End Turn\n      </button>\n    </div>\n  )\n\n  const Board = () => (\n    <div className='board'>\n      {board.map((row, rowIdx)=> (\n        <div className='row' key={rowIdx}>\n          {row.map((cell, colIdx) => {\n            let classes = 'cell'\n\n            if (typeof cell[1] === 'string') {\n              classes = classes + ` ${cell[1]}`\n            }\n\n            if ([2, 5].includes(rowIdx) && [2, 5].includes(colIdx)) {\n              classes = classes + ' trap'\n            }\n\n            if (rowIdx === ownSelRow && colIdx === ownSelCol) {\n              classes = classes + ' own-selected'\n            }\n\n            if (rowIdx === enemySelRow && colIdx === enemySelCol) {\n              classes = classes + ' enemy-selected'\n            }\n\n            return (\n              <button\n                className={classes}\n                key={colIdx}\n                onClick={handleCellClick({ rowIdx, colIdx })}\n                disabled={typeof winner === 'string'}\n              >\n                {\n                  cell[0] !== null ?\n                    <img\n                      src={POWER_TO_IMG[`${cell[0]} ${cell[1]}`]}\n                      alt={cell[0]}\n                      width=\"80px\"\n                      height=\"80px\"\n                    /> :\n                    null\n                }\n              </button>\n            )\n          })}\n        </div>\n      ))}\n    </div>\n  )\n\n  const HistoryOfMoves = () => (\n    <div className=\"current-moves\">\n      <h3>Change to a move</h3>\n      {history[currentTurn].map((_, wantedMove) => (\n        <button \n          key={wantedMove} \n          onClick={changeToMove(wantedMove)}\n        >\n          {`Go to move: ${wantedMove}`}\n        </button>\n      ))}\n    </div>\n  )\n\n  const Options = () => (\n    <div className='options'>\n      <button className='toggle-history' onClick={toggleHistory}>\n        { isHistoryEnabled ? 'Hide history' : 'Show history' }\n      </button>\n      <button className='new-game' onClick={startNewGame}>New Game</button>\n      { \n        !isHistoryEnabled ?\n          null :\n          <ul>\n            {history.map((turn, wantedTurn) => {\n              const nameOfPlayer = turn[0]['playerOnTurn']\n                .replace(/^./, m => m.toUpperCase())\n\n              return (\n                <li key={wantedTurn}>\n                  <button onClick={changeToTurn(wantedTurn)}>\n                    {`${nameOfPlayer} turn: ${wantedTurn + 1}`}\n                  </button>\n                </li>\n              )\n            })}\n          </ul>\n      }\n    </div>\n  )\n\n  return (\n    <div className=\"game\">\n      <div className=\"playfield\">\n        <BoardInfo />\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        {\n          currentTurn < 2 ?\n            null :\n            <HistoryOfMoves />\n        }\n        <Options />\n      </div>\n    </div>\n  )\n}\n\nrender(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}