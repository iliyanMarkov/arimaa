{"version":3,"sources":["img/camel-g.png","img/camel-s.png","img/cat-g.png","img/cat-s.png","img/elephant-g.png","img/elephant-s.png","img/horse-g.png","img/horse-s.png","img/rabbit-g.png","img/rabbit-s.png","img/wolf-g.png","img/wolf-s.png","constants.js","components/Board.js","components/BoardInfo.js","components/HistoryOfMoves.js","components/HistoryOfTurns.js","components/Options.js","components/Game.js","index.js"],"names":["GOLD","SILVER","RABBITS_ROW","Array","keys","map","OTHER_ANIMALS_ROW","POWER_TO_IMG","rabbitG","catG","wolfG","horseG","camelG","elephantG","rabbitS","catS","wolfS","horseS","camelS","elephantS","DEFAULT_HISTORY","playerOnTurn","movesLeft","winner","board","idx","rabbit","concat","animal","Board","memo","props","getNeighbours","getIsFrozen","getValidClicks","selectedPositions","setSelectedPositions","history","currentMove","currentTurn","setCurrentMove","setHistory","ownSelRow","ownSelCol","enemySelRow","enemySelCol","enemy","removeFiguresInTraps","rowIdx","colIdx","traps","i","trapOwner","every","length","handleCellClick","clickedCellFigure","clickedCellOwner","nextHistory","turns","move","Object","assign","nextBoard","row","slice","ownSelFigure","ownSelOwner","ownSelNeighbours","enemySelNeighbours","isFrozen","neighbours","isValidClick","some","neighRow","neighCol","className","cell","classes","includes","onClick","disabled","src","alt","BoardInfo","toUpperCase","HistoryOfMoves","changeToMove","wantedMove","_","HistoryOfTurns","setCurrentTurn","isHistoryEnabled","changeToTurn","wantedTurn","turn","nameOfPlayer","replace","m","Options","setIsHistoryEnabled","getNextWinner","figure","owner","goldHasRabbits","silverHasRabbits","pieces","push","goldHasAvailableMoves","silverHasAvailableMoves","ownNeighbours","combinedNeighbours","reduce","acc","neighbour","neighFigure","neighboursToAdd","validClicks","toggleHistory","startNewGame","window","confirm","areBoardsEqual","boardA","boardB","rowA","cellIdx","figureA","ownerA","figureB","ownerB","handleEndTurnClick","nextPlayerOnTurn","currentMoves","previousMoves","alert","Game","useState","undefined","filter","el","neighOwner","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa0542f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/camel-g.4f28b9c5.png\";","export default __webpack_public_path__ + \"static/media/camel-s.214e0078.png\";","export default __webpack_public_path__ + \"static/media/cat-g.a895ead5.png\";","export default __webpack_public_path__ + \"static/media/cat-s.a0ddfe76.png\";","export default __webpack_public_path__ + \"static/media/elephant-g.a7445149.png\";","export default __webpack_public_path__ + \"static/media/elephant-s.49328257.png\";","export default __webpack_public_path__ + \"static/media/horse-g.562e2558.png\";","export default __webpack_public_path__ + \"static/media/horse-s.7c52f2eb.png\";","export default __webpack_public_path__ + \"static/media/rabbit-g.5a4c4a45.png\";","export default __webpack_public_path__ + \"static/media/rabbit-s.89c019da.png\";","export default __webpack_public_path__ + \"static/media/wolf-g.8d1a6f9f.png\";","export default __webpack_public_path__ + \"static/media/wolf-s.4311b5ff.png\";","import camelG from \"./img/camel-g.png\"\nimport camelS from \"./img/camel-s.png\"\nimport catG from \"./img/cat-g.png\"\nimport catS from \"./img/cat-s.png\"\nimport elephantG from \"./img/elephant-g.png\"\nimport elephantS from \"./img/elephant-s.png\"\nimport horseG from \"./img/horse-g.png\"\nimport horseS from \"./img/horse-s.png\"\nimport rabbitG from \"./img/rabbit-g.png\"\nimport rabbitS from \"./img/rabbit-s.png\"\nimport wolfG from \"./img/wolf-g.png\"\nimport wolfS from \"./img/wolf-s.png\"\n\nexport const GOLD = 'gold'\nexport const SILVER = 'silver'\nexport const RABBITS_ROW = [...Array(8).keys()].map(() => [1])\nexport const OTHER_ANIMALS_ROW = [[2], [4], [3], [6], [5], [3], [4], [2]]\nexport const POWER_TO_IMG = {\n  [`1 ${GOLD}`]: rabbitG,\n  [`2 ${GOLD}`]: catG,\n  [`3 ${GOLD}`]: wolfG,\n  [`4 ${GOLD}`]: horseG,\n  [`5 ${GOLD}`]: camelG,\n  [`6 ${GOLD}`]: elephantG,\n  [`1 ${SILVER}`]: rabbitS,\n  [`2 ${SILVER}`]: catS,\n  [`3 ${SILVER}`]: wolfS,\n  [`4 ${SILVER}`]: horseS,\n  [`5 ${SILVER}`]: camelS,\n  [`6 ${SILVER}`]: elephantS\n}\nexport const DEFAULT_HISTORY = [[{\n  playerOnTurn: GOLD,\n  movesLeft: 4,\n  winner: null,\n  board: [...Array(8).keys()].map(idx => {\n    switch (idx) {\n      case 0:\n        return RABBITS_ROW.map(rabbit => rabbit.concat(SILVER))\n      case 7:\n        return RABBITS_ROW.map(rabbit => rabbit.concat(GOLD))\n      case 1:\n        return OTHER_ANIMALS_ROW.map(animal => animal.concat(SILVER))\n      case 6:\n        return OTHER_ANIMALS_ROW.map(animal => animal.concat(GOLD))\n      default:\n        return [...Array(8).keys()].map(() => [null])\n    }\n  })\n}]]\n\n","import React, { memo } from 'react'\nimport { GOLD, POWER_TO_IMG, SILVER } from '../constants'\n\nexport const Board = memo((props = {}) => {\n  const { getNeighbours, getIsFrozen, getValidClicks } = props\n  const { selectedPositions, setSelectedPositions } = props\n  const { history, currentMove, currentTurn } = props\n  const { setCurrentMove, setHistory } = props\n\n  const { playerOnTurn, movesLeft, winner, board } = history[currentTurn][currentMove]\n  const [[ownSelRow, ownSelCol], [enemySelRow, enemySelCol]] = selectedPositions\n  const enemy = playerOnTurn === GOLD ? SILVER : GOLD\n\n  const removeFiguresInTraps = ({ board, rowIdx, colIdx }) => {\n    // position and owner\n    const traps = [\n      [[2, 2], board[2][2][1]],\n      [[2, 5], board[2][5][1]],\n      [[5, 2], board[5][2][1]],\n      [[5, 5], board[5][5][1]]\n    ]\n\n    for (let i = 0; i < traps.length; i++) {\n      const [[rowIdx, colIdx], trapOwner] = traps[i]\n\n      if (typeof trapOwner !== 'string') {\n        continue\n      }\n\n      const isTrapProtected = getNeighbours({ rowIdx, colIdx, board })\n        .every(([_pos, [_fig, neighOwner]]) => neighOwner !== trapOwner)\n\n      if (isTrapProtected) {\n        board[rowIdx][colIdx] = [null]\n      }\n    }\n\n    const [figure] = board[rowIdx][colIdx]\n\n    // remove selection if selected figure got removed from trap\n    if (figure === null) {\n      setSelectedPositions([[], []])\n    }\n  }\n\n  const handleCellClick = ({ rowIdx, colIdx }) => () => {\n    const [clickedCellFigure, clickedCellOwner] = board[rowIdx][colIdx]\n\n    // Clicking on own figure\n    if (\n      clickedCellFigure !== null &&\n      clickedCellOwner === playerOnTurn &&\n      (currentTurn > 1 || selectedPositions[0].length === 0)\n    ) {\n      setSelectedPositions([[rowIdx, colIdx], []])\n      return\n    }\n\n    // Moving the selected figures\n    if (selectedPositions[0].length === 2) {\n      const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n      const nextBoard = board.map(row => [...row])\n\n      // rearranging figures in first 2 turns\n      if (\n        currentTurn < 2 &&\n        clickedCellFigure !== null &&\n        clickedCellOwner === playerOnTurn\n      ) {\n        nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n        nextBoard[ownSelRow][ownSelCol] = board[rowIdx][colIdx]\n\n        // remove the selection on the second click\n        setSelectedPositions([[], []])\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            movesLeft,\n            winner,\n            board: nextBoard\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n\n        return\n      }\n\n      const [ownSelFigure, ownSelOwner] = board[ownSelRow][ownSelCol]\n      const ownSelNeighbours = getNeighbours({ rowIdx: ownSelRow, colIdx: ownSelCol, board })\n      const enemySelNeighbours = getNeighbours({ rowIdx: enemySelRow, colIdx: enemySelCol, board })\n\n\n      const isFrozen = getIsFrozen({\n        neighbours: ownSelNeighbours,\n        playerOnTurn,\n        enemy,\n        ownSelFigure\n      })\n      const validClicks = getValidClicks({\n        // enemy figure may be clicked, so add its neighbour cells\n        neighbours: ownSelNeighbours.concat(enemySelNeighbours),\n        ownSelFigure,\n        ownSelOwner,\n        enemy,\n        movesLeft\n      })\n      const isValidClick = validClicks.some(([[neighRow, neighCol]]) =>\n        neighRow === rowIdx && neighCol === colIdx\n      )\n\n      // checking if valid click\n      if (currentTurn > 1 && movesLeft > 0 && !isFrozen && isValidClick) {\n        // selecting on neighbour enemy figure\n        if (clickedCellOwner === enemy) {\n          setSelectedPositions([[ownSelRow, ownSelCol], [rowIdx, colIdx]])\n          return\n        }\n\n        // enemy figure is selected and trying to push or pull\n        if (selectedPositions[1].length === 2) {\n          // pull\n          if (ownSelNeighbours.some(\n            ([[neighRow, neighCol]]) => neighRow === rowIdx && neighCol === colIdx)\n          ) {\n            nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = [null]\n\n            setSelectedPositions([[rowIdx, colIdx], []])\n            // push\n          } else {\n            nextBoard[rowIdx][colIdx] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = [null]\n\n            setSelectedPositions([[enemySelRow, enemySelCol], []])\n          }\n          // moving own figure to empty cell\n        } else {\n          nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n          nextBoard[ownSelRow][ownSelCol] = [null]\n\n          setSelectedPositions([[rowIdx, colIdx], []])\n        }\n\n        // remove figures on modified board\n        removeFiguresInTraps({ board: nextBoard, rowIdx, colIdx })\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            winner,\n            board: nextBoard,\n            movesLeft: selectedPositions[1].length === 2 ?\n            movesLeft - 2 :\n            movesLeft - 1\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n      }\n    }\n  }\n\n\n  return (\n    <div className='board'>\n      {board.map((row, rowIdx)=> (\n        <div className='row' key={rowIdx}>\n          {row.map((cell, colIdx) => {\n            let classes = 'cell'\n\n            if (typeof cell[1] === 'string') {\n              classes = classes + ` ${cell[1]}`\n            }\n\n            if ([2, 5].includes(rowIdx) && [2, 5].includes(colIdx)) {\n              classes = classes + ' trap'\n            }\n\n            if (rowIdx === ownSelRow && colIdx === ownSelCol) {\n              classes = classes + ' own-selected'\n            }\n\n            if (rowIdx === enemySelRow && colIdx === enemySelCol) {\n              classes = classes + ' enemy-selected'\n            }\n\n            return (\n              <button\n                className={classes}\n                key={`${rowIdx}${colIdx}`}\n                onClick={handleCellClick({ rowIdx, colIdx })}\n                disabled={typeof winner === 'string'}\n              >\n                {\n                  cell[0] !== null ?\n                    <img\n                      src={POWER_TO_IMG[`${cell[0]} ${cell[1]}`]}\n                      alt={cell[0]}\n                    /> :\n                    null\n                }\n              </button>\n            )\n          })}\n        </div>\n      ))}\n    </div>\n  )\n})\n","import React, { memo } from 'react'\n\nexport const BoardInfo = memo((props = {}) => {\n  const { history, currentTurn, currentMove } = props\n\n  const { playerOnTurn, movesLeft, winner } = history[currentTurn][currentMove]\n\n  return (\n    <div className='board-info'>\n      {\n        currentTurn < 2 ?\n          `Rearrange figures for ${playerOnTurn}` :\n          typeof winner === 'string' ?\n          `Winner is ${winner.toUpperCase()}!` :\n          `Moves left for ${playerOnTurn}: ${movesLeft}`\n      }\n    </div>\n  )\n})\n","import React, { memo } from 'react'\n\nexport const HistoryOfMoves = memo((props = {}) => {\n  const { setCurrentMove, setSelectedPositions, currentTurn } = props\n  const { history } = props\n\n  const changeToMove = wantedMove => () => {\n    setCurrentMove(wantedMove)\n    setSelectedPositions([[], []])\n  }\n\n  return (\n    <>\n      {\n        currentTurn < 2 ?\n          null :\n          <div className=\"history-moves\">\n            <h3>Change to a move</h3>\n            {history[currentTurn].map((_, wantedMove) => (\n              <button\n                key={wantedMove} \n                onClick={changeToMove(wantedMove)}\n              >\n                {`Go to move: ${wantedMove}`}\n              </button>\n            ))}\n          </div>\n      }\n    </>\n  )\n})\n","import React, { memo } from 'react'\n\nexport const HistoryOfTurns = memo((props = {}) => {\n  const { setCurrentTurn, setCurrentMove, setSelectedPositions } = props\n  const { isHistoryEnabled, history } = props\n\n  const changeToTurn = wantedTurn => () => {\n    setCurrentTurn(wantedTurn)\n    setCurrentMove(history[wantedTurn].length - 1)\n    setSelectedPositions([[], []])\n  }\n\n  return (\n    <>\n      {\n        !isHistoryEnabled ?\n          null :\n          <div className=\"history-turns\">\n            <h3>Change to a turn</h3>\n            <ul>\n              {history.map((turn, wantedTurn) => {\n                const nameOfPlayer = turn[0]['playerOnTurn']\n                  .replace(/^./, m => m.toUpperCase())\n\n                return (\n                  <li key={wantedTurn}>\n                    <button onClick={changeToTurn(wantedTurn)}>\n                      {`${nameOfPlayer} turn: ${wantedTurn + 1}`}\n                    </button>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n      }\n    </>\n  )\n})\n","import React, { memo } from 'react'\nimport { DEFAULT_HISTORY, GOLD, SILVER } from '../constants'\n\nexport const Options = memo((props = {}) => {\n  const { getNeighbours, getIsFrozen, getValidClicks } = props\n  const { setIsHistoryEnabled, isHistoryEnabled } = props\n  const { setSelectedPositions, setCurrentTurn, setCurrentMove } = props\n  const { setHistory, history, currentTurn, currentMove } = props\n\n  const { playerOnTurn, movesLeft, winner, board } = history[currentTurn][currentMove]\n  const enemy = playerOnTurn === GOLD ? SILVER : GOLD\n\n  const getNextWinner = ({ board }) => {\n    // check if gold rabbit has reached the end\n    if (board[0].some(([figure, owner]) => figure === 1 && owner === GOLD)) {\n      return GOLD\n    }\n\n    // check if silver rabbit has reached the end\n    if (board[7].some(([figure, owner]) => figure === 1 && owner === SILVER)) {\n      return SILVER\n    }\n\n    let [goldHasRabbits, silverHasRabbits] = [false, false]\n    let pieces = []\n\n    // save every figure info\n    // check if every player has rabbits left\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n      for (let colIdx = 0; colIdx < board[rowIdx].length; colIdx++) {\n        const [figure, owner] = board[rowIdx][colIdx]\n\n        if (figure !== null) {\n          pieces.push([[rowIdx, colIdx], [figure, owner]])\n        }\n\n        if (figure === 1) {\n          if (owner === GOLD) {\n            goldHasRabbits = true\n          } else {\n            silverHasRabbits = true\n          }\n        }\n      }\n    }\n\n    if (!silverHasRabbits) {\n      return GOLD\n    }\n\n    if (!goldHasRabbits) {\n      return SILVER\n    }\n\n    // check if some player has no available moves\n    let [goldHasAvailableMoves, silverHasAvailableMoves] = [false, false]\n\n    pieces.some(([[rowIdx, colIdx], [figure, owner]]) => {\n      const ownNeighbours = getNeighbours({ rowIdx, colIdx, board })\n      const combinedNeighbours = ownNeighbours.reduce((acc, neighbour) => {\n        const [[neighRow, neighCol], [neighFigure, neighOwner]] = neighbour\n        let neighboursToAdd = [neighbour]\n\n        if (neighOwner !== owner && neighFigure < figure) {\n          neighboursToAdd = neighboursToAdd.concat(\n            getNeighbours({ rowIdx: neighRow, colIdx: neighCol, board })\n          )\n        }\n\n        return acc.concat(neighboursToAdd)\n      }, [])\n\n      const isFrozen = getIsFrozen({\n        neighbours: ownNeighbours,\n        ownSelFigure: figure,\n        playerOnTurn,\n        enemy\n      })\n      const validClicks = getValidClicks({\n        neighbours: combinedNeighbours,\n        ownSelFigure: figure,\n        ownSelOwner: owner,\n        enemy,\n        movesLeft\n      })\n\n      if (!isFrozen && validClicks.length > 0) {\n        if (owner === GOLD) {\n          goldHasAvailableMoves = true\n        } else {\n          silverHasAvailableMoves = true\n        }\n      }\n\n      return goldHasAvailableMoves && silverHasAvailableMoves\n    })\n\n    if (!silverHasAvailableMoves) {\n      return GOLD\n    }\n\n    if (!goldHasAvailableMoves) {\n      return SILVER\n    }\n\n    return null\n  }\n\n  const toggleHistory = () => {\n    setIsHistoryEnabled(!isHistoryEnabled)\n  }\n\n  const startNewGame = () => {\n    if (window.confirm('Are you sure you want to start a new game?')) {\n      setSelectedPositions([[], []])\n      setCurrentTurn(0)\n      setCurrentMove(0)\n      setHistory(DEFAULT_HISTORY)\n    }\n  }\n\n  const areBoardsEqual = ({ boardA, boardB }) => boardA.every((rowA, rowIdx) => (\n    rowA.every(([figureA, ownerA], cellIdx) => {\n      const [figureB, ownerB] = boardB[rowIdx][cellIdx]\n\n      return figureA === figureB && ownerA === ownerB\n    })\n  ))\n\n  const handleEndTurnClick = () => {\n    const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n    const nextPlayerOnTurn = playerOnTurn === GOLD ? SILVER : GOLD\n    const currentMoves = nextHistory[currentTurn]\n    const previousMoves = nextHistory[currentTurn - 2]\n    const hasTheBoardChanged = currentTurn > 1 ?\n      !areBoardsEqual({\n        boardA: currentMoves[0].board,\n        boardB: currentMoves[currentMoves.length - 1].board\n      }) :\n      true\n\n    if (!hasTheBoardChanged) {\n      alert('Please make a difference to the board! The turn you made is invalid!')\n\n      return\n    }\n\n    const hasZugzwangOccured = currentTurn > 3 ?\n      areBoardsEqual({\n        boardA: previousMoves[previousMoves.length - 1].board,\n        boardB: currentMoves[currentMoves.length - 1].board\n      }) :\n      false\n\n    if (hasZugzwangOccured) {\n      alert('Please make a different turn, than returning to the previous board state!')\n\n      return\n    }\n\n    setCurrentTurn(currentTurn + 1)\n    setCurrentMove(0)\n    setSelectedPositions([[], []])\n\n    // remove unwanted moves\n    nextHistory[currentTurn] = nextHistory[currentTurn]\n      .slice(0, currentMove + 1)\n\n    setHistory(nextHistory.slice(0, currentTurn + 1)\n      .concat([[{\n        playerOnTurn: nextPlayerOnTurn,\n        movesLeft: 4,\n        winner: getNextWinner({ board }),\n        board\n      }]])\n    )\n  }\n\n  return (\n    <div className='options'>\n      <button\n        className='options-button'\n        onClick={handleEndTurnClick}\n        disabled={\n          (currentTurn > 1 && movesLeft === 4) ||\n            typeof winner === 'string'\n        }\n      >\n        End Turn\n      </button>\n      <button className='options-button' onClick={toggleHistory}>\n        { isHistoryEnabled ? 'Hide history' : 'Show history' }\n      </button>\n      <button className='options-button' onClick={startNewGame}>\n        New Game\n      </button>\n    </div>\n  )\n})\n","import React, { useState, memo } from 'react'\nimport { DEFAULT_HISTORY, GOLD, SILVER } from '../constants'\nimport { Board } from './Board'\nimport { BoardInfo } from './BoardInfo'\nimport { HistoryOfMoves } from './HistoryOfMoves'\nimport { HistoryOfTurns } from './HistoryOfTurns'\nimport { Options } from './Options'\n\nexport const Game = memo(() => {\n  const [isHistoryEnabled, setIsHistoryEnabled] = useState(true)\n  const [selectedPositions, setSelectedPositions] = useState([[], []])\n  const [currentTurn, setCurrentTurn] = useState(0)\n  const [currentMove, setCurrentMove] = useState(0)\n  const [history, setHistory] = useState(DEFAULT_HISTORY)\n\n  const getNeighbours = ({ rowIdx, colIdx, board }) => {\n    // [[rowIdx, colIdx], [figure, owner], 'position']\n    return [\n      rowIdx > 0 ?\n        [[rowIdx - 1, colIdx], board[rowIdx - 1][colIdx], 'top'] :\n        undefined,\n      rowIdx < 7 ?\n        [[rowIdx + 1, colIdx], board[rowIdx + 1][colIdx], 'bottom'] :\n        undefined,\n      colIdx > 0 ?\n        [[rowIdx, colIdx - 1], board[rowIdx][colIdx - 1], 'left'] :\n        undefined,\n      colIdx < 7 ?\n        [[rowIdx, colIdx + 1], board[rowIdx][colIdx + 1], 'right'] :\n        undefined\n    ].filter(el => el !== undefined)\n  }\n\n  const getIsFrozen = ({ neighbours, ownSelFigure, playerOnTurn, enemy }) => (\n    neighbours.every(([_pos, [_fig, neighOwner]]) => neighOwner !== playerOnTurn) &&\n    neighbours.some(([_pos, [neighFigure, neighOwner]]) =>\n      neighFigure > ownSelFigure && neighOwner === enemy\n    )\n  )\n\n  const getValidClicks = ({\n    neighbours,\n    ownSelFigure,\n    ownSelOwner,\n    enemy,\n    movesLeft\n  }) => {\n    // rabbit is clicked, which can't go back\n    if (ownSelFigure === 1) {\n      neighbours = neighbours.filter(neighbour => (\n        !(neighbour[2] === 'top' && ownSelFigure === 1 && ownSelOwner === SILVER) &&\n        !(neighbour[2] === 'bottom' && ownSelFigure === 1 && ownSelOwner === GOLD)\n      ))\n    }\n\n    return neighbours.filter(([[neighRow, neighCol], [neighFigure, neighOwner]]) => (\n      neighFigure === null ||\n      (neighOwner === enemy && neighFigure < ownSelFigure && movesLeft > 1)\n    ))\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"playfield\">\n        <BoardInfo\n          history={history}\n          currentTurn={currentTurn}\n          currentMove={currentMove}\n        />\n        <Board\n          getNeighbours={getNeighbours}\n          getIsFrozen={getIsFrozen}\n          getValidClicks={getValidClicks}\n          selectedPositions={selectedPositions}\n          setSelectedPositions={setSelectedPositions}\n          history={history}\n          currentTurn={currentTurn}\n          currentMove={currentMove}\n          setCurrentMove={setCurrentMove}\n          setHistory={setHistory}\n        />\n      </div>\n      <div className=\"game-info\">\n        <Options\n          getNeighbours={getNeighbours}\n          getIsFrozen={getIsFrozen}\n          getValidClicks={getValidClicks}\n          setIsHistoryEnabled={setIsHistoryEnabled}\n          isHistoryEnabled={isHistoryEnabled}\n          setSelectedPositions={setSelectedPositions}\n          setCurrentTurn={setCurrentTurn}\n          setCurrentMove={setCurrentMove}\n          setHistory={setHistory}\n          history={history}\n          currentTurn={currentTurn}\n          currentMove={currentMove}\n        />\n        <HistoryOfMoves\n          setCurrentMove={setCurrentMove}\n          setSelectedPositions={setSelectedPositions}\n          currentTurn={currentTurn}\n          history={history}\n        />\n        <HistoryOfTurns\n          setCurrentTurn={setCurrentTurn}\n          setCurrentMove={setCurrentMove}\n          setSelectedPositions={setSelectedPositions}\n          isHistoryEnabled={isHistoryEnabled}\n          history={history}\n        />\n      </div>\n    </div>\n  )\n})\n","import './index.css'\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Game } from './components/Game'\n\nrender(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}