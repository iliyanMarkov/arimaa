{"version":3,"sources":["img/rabbit-g.png","img/cat-g.png","img/wolf-g.png","img/horse-g.png","img/camel-g.png","img/elephant-g.png","img/rabbit-s.png","img/cat-s.png","img/wolf-s.png","img/horse-s.png","img/camel-s.png","img/elephant-s.png","index.js"],"names":["Game","GOLD","SILVER","RABBITS_ROW","Array","keys","map","OTHER_ANIMALS_ROW","POWER_TO_IMG","rabbitG","catG","wolfG","horseG","camelG","elephantG","rabbitS","catS","wolfS","horseS","camelS","elephantS","DEFAULT_HISTORY","playerOnTurn","movesLeft","winner","board","idx","rabbit","concat","animal","useState","isHistoryEnabled","setIsHistoryEnabled","selectedPositions","setSelectedPositions","currentTurn","setCurrentTurn","currentMove","setCurrentMove","history","setHistory","ownSelRow","ownSelCol","enemySelRow","enemySelCol","enemy","getNeighbours","rowIdx","colIdx","undefined","filter","el","getIsFrozen","neighbours","ownSelFigure","every","some","neighFigure","neighOwner","getValidClicks","ownSelOwner","neighbour","getNextWinner","figure","owner","goldHasRabbits","silverHasRabbits","pieces","length","push","goldHasAvailableMoves","silverHasAvailableMoves","ownNeighbours","combinedNeighbours","reduce","acc","neighRow","neighCol","neighboursToAdd","isFrozen","validClicks","handleCellClick","clickedCellFigure","clickedCellOwner","nextHistory","turns","move","Object","assign","nextBoard","row","slice","ownSelNeighbours","enemySelNeighbours","isValidClick","traps","i","trapOwner","removeFiguresInTraps","areBoardsEqual","boardA","boardB","rowA","cellIdx","figureA","ownerA","figureB","ownerB","handleEndTurnClick","nextPlayerOnTurn","currentMoves","previousMoves","alert","toggleHistory","changeToTurn","wantedTurn","changeToMove","wantedMove","startNewGame","window","confirm","BoardInfo","className","toUpperCase","Board","cell","classes","includes","onClick","disabled","src","alt","width","height","Options","HistoryOfMoves","_","HistoryOfTurns","turn","nameOfPlayer","replace","m","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94378aea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rabbit-g.5a4c4a45.png\";","export default __webpack_public_path__ + \"static/media/cat-g.a895ead5.png\";","export default __webpack_public_path__ + \"static/media/wolf-g.8d1a6f9f.png\";","export default __webpack_public_path__ + \"static/media/horse-g.562e2558.png\";","export default __webpack_public_path__ + \"static/media/camel-g.4f28b9c5.png\";","export default __webpack_public_path__ + \"static/media/elephant-g.a7445149.png\";","export default __webpack_public_path__ + \"static/media/rabbit-s.89c019da.png\";","export default __webpack_public_path__ + \"static/media/cat-s.a0ddfe76.png\";","export default __webpack_public_path__ + \"static/media/wolf-s.4311b5ff.png\";","export default __webpack_public_path__ + \"static/media/horse-s.7c52f2eb.png\";","export default __webpack_public_path__ + \"static/media/camel-s.214e0078.png\";","export default __webpack_public_path__ + \"static/media/elephant-s.49328257.png\";","import React, { useState } from 'react'\nimport { render } from 'react-dom'\nimport './index.css'\nimport rabbitG from \"./img/rabbit-g.png\"\nimport catG from \"./img/cat-g.png\"\nimport wolfG from \"./img/wolf-g.png\"\nimport horseG from \"./img/horse-g.png\"\nimport camelG from \"./img/camel-g.png\"\nimport elephantG from \"./img/elephant-g.png\"\nimport rabbitS from \"./img/rabbit-s.png\"\nimport catS from \"./img/cat-s.png\"\nimport wolfS from \"./img/wolf-s.png\"\nimport horseS from \"./img/horse-s.png\"\nimport camelS from \"./img/camel-s.png\"\nimport elephantS from \"./img/elephant-s.png\"\n\nconst Game = () => {\n  const GOLD = 'gold'\n  const SILVER = 'silver'\n  const RABBITS_ROW = [...Array(8).keys()].map(() => [1])\n  const OTHER_ANIMALS_ROW = [[2], [4], [3], [6], [5], [3], [4], [2]]\n  const POWER_TO_IMG = {\n    [`1 ${GOLD}`]: rabbitG,\n    [`2 ${GOLD}`]: catG,\n    [`3 ${GOLD}`]: wolfG,\n    [`4 ${GOLD}`]: horseG,\n    [`5 ${GOLD}`]: camelG,\n    [`6 ${GOLD}`]: elephantG,\n    [`1 ${SILVER}`]: rabbitS,\n    [`2 ${SILVER}`]: catS,\n    [`3 ${SILVER}`]: wolfS,\n    [`4 ${SILVER}`]: horseS,\n    [`5 ${SILVER}`]: camelS,\n    [`6 ${SILVER}`]: elephantS\n  }\n  const DEFAULT_HISTORY = [[{\n    playerOnTurn: GOLD,\n    movesLeft: 4,\n    winner: null,\n    board: [...Array(8).keys()].map(idx => {\n      switch (idx) {\n        case 0:\n          return RABBITS_ROW.map(rabbit => rabbit.concat(SILVER))\n        case 7:\n          return RABBITS_ROW.map(rabbit => rabbit.concat(GOLD))\n        case 1:\n          return OTHER_ANIMALS_ROW.map(animal => animal.concat(SILVER))\n        case 6:\n          return OTHER_ANIMALS_ROW.map(animal => animal.concat(GOLD))\n        default:\n          return [...Array(8).keys()].map(() => [null])\n      }\n    })\n  }]]\n\n  const [isHistoryEnabled, setIsHistoryEnabled] = useState(true)\n  const [selectedPositions, setSelectedPositions] = useState([[], []])\n  const [currentTurn, setCurrentTurn] = useState(0)\n  const [currentMove, setCurrentMove] = useState(0)\n  const [history, setHistory] = useState(DEFAULT_HISTORY)\n\n  const { playerOnTurn, movesLeft, winner, board } = history[currentTurn][currentMove]\n  const [[ownSelRow, ownSelCol], [enemySelRow, enemySelCol]] = selectedPositions\n  const enemy = playerOnTurn === GOLD ? SILVER : GOLD\n\n  const getNeighbours = ({ rowIdx, colIdx, board }) => {\n    // [[rowIdx, colIdx], [figure, owner], 'position']\n    return [\n      rowIdx > 0 ?\n        [[rowIdx - 1, colIdx], board[rowIdx - 1][colIdx], 'top'] :\n        undefined,\n      rowIdx < 7 ?\n        [[rowIdx + 1, colIdx], board[rowIdx + 1][colIdx], 'bottom'] :\n        undefined,\n      colIdx > 0 ?\n        [[rowIdx, colIdx - 1], board[rowIdx][colIdx - 1], 'left'] :\n        undefined,\n      colIdx < 7 ?\n        [[rowIdx, colIdx + 1], board[rowIdx][colIdx + 1], 'right'] :\n        undefined\n    ].filter(el => el !== undefined)\n  }\n\n  const getIsFrozen = ({ neighbours, ownSelFigure }) => (\n    neighbours.every(([_pos, [_fig, neighOwner]]) => neighOwner !== playerOnTurn) &&\n    neighbours.some(([_pos, [neighFigure, neighOwner]]) =>\n      neighFigure > ownSelFigure && neighOwner === enemy\n    )\n  )\n\n  const getValidClicks = ({\n    neighbours,\n    ownSelFigure,\n    ownSelOwner\n  }) => {\n    // rabbit is clicked, which can't go back\n    if (ownSelFigure === 1) {\n      neighbours = neighbours.filter(neighbour => (\n        !(neighbour[2] === 'top' && ownSelFigure === 1 && ownSelOwner === SILVER) &&\n        !(neighbour[2] === 'bottom' && ownSelFigure === 1 && ownSelOwner === GOLD)\n      ))\n    }\n\n    return neighbours.filter(([[neighRow, neighCol], [neighFigure, neighOwner]]) => (\n      neighFigure === null ||\n      (neighOwner === enemy && neighFigure < ownSelFigure && movesLeft > 1)\n    ))\n  }\n\n  const removeFiguresInTraps = ({ board, rowIdx, colIdx }) => {\n    // position and owner\n    const traps = [\n      [[2, 2], board[2][2][1]],\n      [[2, 5], board[2][5][1]],\n      [[5, 2], board[5][2][1]],\n      [[5, 5], board[5][5][1]]\n    ]\n\n    for (let i = 0; i < traps.length; i++) {\n      const [[rowIdx, colIdx], trapOwner] = traps[i]\n\n      if (typeof trapOwner !== 'string') {\n        continue\n      }\n\n      const isTrapProtected = getNeighbours({ rowIdx, colIdx, board })\n        .every(([_pos, [_fig, neighOwner]]) => neighOwner !== trapOwner)\n\n      if (isTrapProtected) {\n        board[rowIdx][colIdx] = [null]\n      }\n    }\n\n    const [figure] = board[rowIdx][colIdx]\n\n    // remove selection if selected figure got removed from trap\n    if (figure === null) {\n      setSelectedPositions([[], []])\n    }\n  }\n\n  const getNextWinner = ({ board }) => {\n    // check if gold rabbit has reached the end\n    if (board[0].some(([figure, owner]) => figure === 1 && owner === GOLD)) {\n      return GOLD\n    }\n\n    // check if silver rabbit has reached the end\n    if (board[7].some(([figure, owner]) => figure === 1 && owner === SILVER)) {\n      return SILVER\n    }\n\n    let [goldHasRabbits, silverHasRabbits] = [false, false]\n    let pieces = []\n\n    // save every figure info\n    // check if every player has rabbits left\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n      for (let colIdx = 0; colIdx < board[rowIdx].length; colIdx++) {\n        const [figure, owner] = board[rowIdx][colIdx]\n\n        if (figure !== null) {\n          pieces.push([[rowIdx, colIdx], [figure, owner]])\n        }\n\n        if (figure === 1) {\n          if (owner === GOLD) {\n            goldHasRabbits = true\n          } else {\n            silverHasRabbits = true\n          }\n        }\n      }\n    }\n\n    if (!silverHasRabbits) {\n      return GOLD\n    }\n\n    if (!goldHasRabbits) {\n      return SILVER\n    }\n\n    // check if some player has no available moves\n    let [goldHasAvailableMoves, silverHasAvailableMoves] = [false, false]\n\n    pieces.some(([[rowIdx, colIdx], [figure, owner]]) => {\n      const ownNeighbours = getNeighbours({ rowIdx, colIdx, board })\n      const combinedNeighbours = ownNeighbours.reduce((acc, neighbour) => {\n        const [[neighRow, neighCol], [neighFigure, neighOwner]] = neighbour\n        let neighboursToAdd = [neighbour]\n\n        if (neighOwner !== owner && neighFigure < figure) {\n          neighboursToAdd = neighboursToAdd.concat(\n            getNeighbours({ rowIdx: neighRow, colIdx: neighCol, board })\n          )\n        }\n\n        return acc.concat(neighboursToAdd)\n      }, [])\n\n      const isFrozen = getIsFrozen({ neighbours: ownNeighbours, ownSelFigure: figure })\n      const validClicks = getValidClicks({\n        neighbours: combinedNeighbours,\n        ownSelFigure: figure,\n        ownSelOwner: owner\n      })\n\n      if (!isFrozen && validClicks.length > 0) {\n        if (owner === GOLD) {\n          goldHasAvailableMoves = true\n        } else {\n          silverHasAvailableMoves = true\n        }\n      }\n\n      return goldHasAvailableMoves && silverHasAvailableMoves\n    })\n\n    if (!silverHasAvailableMoves) {\n      return GOLD\n    }\n\n    if (!goldHasAvailableMoves) {\n      return SILVER\n    }\n\n    return null\n  }\n\n  const handleCellClick = ({ rowIdx, colIdx }) => () => {\n    const [clickedCellFigure, clickedCellOwner] = board[rowIdx][colIdx]\n\n    // Clicking on own figure\n    if (\n      clickedCellFigure !== null &&\n      clickedCellOwner === playerOnTurn &&\n      (currentTurn > 1 || selectedPositions[0].length === 0)\n    ) {\n      setSelectedPositions([[rowIdx, colIdx], []])\n      return\n    }\n\n    // Moving the selected figures\n    if (selectedPositions[0].length === 2) {\n      const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n      const nextBoard = board.map(row => [...row])\n\n      // rearranging figures in first 2 turns\n      if (\n        currentTurn < 2 &&\n        clickedCellFigure !== null &&\n        clickedCellOwner === playerOnTurn\n      ) {\n        nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n        nextBoard[ownSelRow][ownSelCol] = board[rowIdx][colIdx]\n\n        // remove the selection on the second click\n        setSelectedPositions([[], []])\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            movesLeft,\n            winner,\n            board: nextBoard\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n\n        return\n      }\n\n      const [ownSelFigure, ownSelOwner] = board[ownSelRow][ownSelCol]\n      const ownSelNeighbours = getNeighbours({ rowIdx: ownSelRow, colIdx: ownSelCol, board })\n      const enemySelNeighbours = getNeighbours({ rowIdx: enemySelRow, colIdx: enemySelCol, board })\n\n\n      const isFrozen = getIsFrozen({ neighbours: ownSelNeighbours, ownSelFigure })\n      const validClicks = getValidClicks({\n        // enemy figure may be clicked, so add its neighbour cells\n        neighbours: ownSelNeighbours.concat(enemySelNeighbours),\n        ownSelFigure,\n        ownSelOwner\n      })\n      const isValidClick = validClicks.some(([[neighRow, neighCol]]) =>\n        neighRow === rowIdx && neighCol === colIdx\n      )\n\n      // checking if valid click\n      if (currentTurn > 1 && movesLeft > 0 && !isFrozen && isValidClick) {\n        // selecting on neighbour enemy figure\n        if (clickedCellOwner === enemy) {\n          setSelectedPositions([[ownSelRow, ownSelCol], [rowIdx, colIdx]])\n          return\n        }\n\n        // enemy figure is selected and trying to push or pull\n        if (selectedPositions[1].length === 2) {\n          // pull\n          if (ownSelNeighbours.some(\n            ([[neighRow, neighCol]]) => neighRow === rowIdx && neighCol === colIdx)\n          ) {\n            nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = [null]\n\n            setSelectedPositions([[rowIdx, colIdx], []])\n          // push\n          } else {\n            nextBoard[rowIdx][colIdx] = board[enemySelRow][enemySelCol]\n            nextBoard[enemySelRow][enemySelCol] = board[ownSelRow][ownSelCol]\n            nextBoard[ownSelRow][ownSelCol] = [null]\n\n            setSelectedPositions([[enemySelRow, enemySelCol], []])\n          }\n        // moving own figure to empty cell\n        } else {\n          nextBoard[rowIdx][colIdx] = board[ownSelRow][ownSelCol]\n          nextBoard[ownSelRow][ownSelCol] = [null]\n\n          setSelectedPositions([[rowIdx, colIdx], []])\n        }\n\n        // remove figures on modified board\n        removeFiguresInTraps({ board: nextBoard, rowIdx, colIdx })\n\n        // save move to history\n        nextHistory[currentTurn] = nextHistory[currentTurn]\n          .slice(0, currentMove + 1)\n          .concat({\n            playerOnTurn,\n            winner,\n            board: nextBoard,\n            movesLeft: selectedPositions[1].length === 2 ?\n              movesLeft - 2 :\n              movesLeft - 1\n          })\n\n        setCurrentMove(currentMove + 1)\n        setHistory(nextHistory)\n      }\n    }\n  }\n\n  const areBoardsEqual = ({ boardA, boardB }) => boardA.every((rowA, rowIdx) =>\n    rowA.every(([figureA, ownerA], cellIdx) => {\n      const [figureB, ownerB] = boardB[rowIdx][cellIdx]\n\n      return figureA === figureB && ownerA === ownerB\n    })\n  )\n\n  const handleEndTurnClick = () => {\n    const nextHistory = history.map(turns => turns.map(move => Object.assign({}, move)))\n    const nextPlayerOnTurn = playerOnTurn === GOLD ? SILVER : GOLD\n    const currentMoves = nextHistory[currentTurn]\n    const previousMoves = nextHistory[currentTurn - 2]\n    const hasTheBoardChanged = currentTurn > 1 ?\n      !areBoardsEqual({\n        boardA: currentMoves[0].board,\n        boardB: currentMoves[currentMoves.length - 1].board\n      }) :\n      true\n\n    if (!hasTheBoardChanged) {\n      alert('Please make a difference to the board! The turn you made is invalid!')\n\n      return\n    }\n\n    const hasZugzwangOccured = currentTurn > 3 ?\n      areBoardsEqual({\n        boardA: previousMoves[previousMoves.length - 1].board,\n        boardB: currentMoves[currentMoves.length - 1].board\n      }) :\n      false\n\n    if (hasZugzwangOccured) {\n      alert('Please make a different turn, than returning to the previous board state!')\n\n      return\n    }\n\n    setCurrentTurn(currentTurn + 1)\n    setCurrentMove(0)\n    setSelectedPositions([[], []])\n\n    // remove unwanted moves\n    nextHistory[currentTurn] = nextHistory[currentTurn]\n      .slice(0, currentMove + 1)\n\n    setHistory(nextHistory.slice(0, currentTurn + 1)\n      .concat([[{\n        playerOnTurn: nextPlayerOnTurn,\n        movesLeft: 4,\n        winner: getNextWinner({ board }),\n        board\n      }]])\n    )\n  }\n\n  const toggleHistory = () => {\n    setIsHistoryEnabled(!isHistoryEnabled)\n  }\n\n  const changeToTurn = wantedTurn => () => {\n    setCurrentTurn(wantedTurn)\n    setCurrentMove(history[wantedTurn].length - 1)\n    setSelectedPositions([[], []])\n  }\n\n  const changeToMove = wantedMove => () => {\n    setCurrentMove(wantedMove)\n    setSelectedPositions([[], []])\n  }\n\n  const startNewGame = () => {\n    if (window.confirm('Are you sure you want to start a new game?')) {\n      setSelectedPositions([[], []])\n      setCurrentTurn(0)\n      setCurrentMove(0)\n      setHistory(DEFAULT_HISTORY)\n    }\n  }\n\n  const BoardInfo = () => (\n    <div className='board-info'>\n      {\n        currentTurn < 2 ?\n          `Rearrange figures for ${playerOnTurn}` :\n          typeof winner === 'string' ?\n            `Winner is ${winner.toUpperCase()}!` :\n            `Moves left for ${playerOnTurn}: ${movesLeft}`\n      }\n    </div>\n  )\n\n  const Board = () => (\n    <div className='board'>\n      {board.map((row, rowIdx)=> (\n        <div className='row' key={rowIdx}>\n          {row.map((cell, colIdx) => {\n            let classes = 'cell'\n\n            if (typeof cell[1] === 'string') {\n              classes = classes + ` ${cell[1]}`\n            }\n\n            if ([2, 5].includes(rowIdx) && [2, 5].includes(colIdx)) {\n              classes = classes + ' trap'\n            }\n\n            if (rowIdx === ownSelRow && colIdx === ownSelCol) {\n              classes = classes + ' own-selected'\n            }\n\n            if (rowIdx === enemySelRow && colIdx === enemySelCol) {\n              classes = classes + ' enemy-selected'\n            }\n\n            return (\n              <button\n                className={classes}\n                key={colIdx}\n                onClick={handleCellClick({ rowIdx, colIdx })}\n                disabled={typeof winner === 'string'}\n              >\n                {\n                  cell[0] !== null ?\n                    <img\n                      src={POWER_TO_IMG[`${cell[0]} ${cell[1]}`]}\n                      alt={cell[0]}\n                      width=\"80px\"\n                      height=\"80px\"\n                    /> :\n                    null\n                }\n              </button>\n            )\n          })}\n        </div>\n      ))}\n    </div>\n  )\n\n  const Options = () => (\n    <div className='options'>\n      <button\n        className='options-button'\n        onClick={handleEndTurnClick}\n        disabled={\n          (currentTurn > 1 && movesLeft === 4) ||\n            typeof winner === 'string'\n        }\n      >\n        End Turn\n      </button>\n      <button className='options-button' onClick={toggleHistory}>\n        { isHistoryEnabled ? 'Hide history' : 'Show history' }\n      </button>\n      <button className='options-button' onClick={startNewGame}>\n        New Game\n      </button>\n    </div>\n  )\n\n  const HistoryOfMoves = () => (\n    <div className=\"history-moves\">\n      <h3>Change to a move</h3>\n      {history[currentTurn].map((_, wantedMove) => (\n        <button\n          key={wantedMove} \n          onClick={changeToMove(wantedMove)}\n        >\n          {`Go to move: ${wantedMove}`}\n        </button>\n      ))}\n    </div>\n  )\n\n\n  const HistoryOfTurns = () => (\n    <>\n      {\n        !isHistoryEnabled ?\n        null :\n        <div className=\"history-turns\">\n          <h3>Change to a turn</h3>\n          <ul>\n            {history.map((turn, wantedTurn) => {\n              const nameOfPlayer = turn[0]['playerOnTurn']\n                .replace(/^./, m => m.toUpperCase())\n\n              return (\n                <li key={wantedTurn}>\n                  <button onClick={changeToTurn(wantedTurn)}>\n                    {`${nameOfPlayer} turn: ${wantedTurn + 1}`}\n                  </button>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      }\n    </>\n  )\n\n  return (\n    <div className=\"game\">\n      <div className=\"playfield\">\n        <BoardInfo />\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <Options />\n        {\n          currentTurn < 2 ?\n            null :\n            <HistoryOfMoves />\n        }\n        <HistoryOfTurns />\n      </div>\n    </div>\n  )\n}\n\nrender(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}